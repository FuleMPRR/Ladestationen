<!doctype html>
<html lang="de">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>EV‑Ladestationen – Übersicht</title>
  <meta name="description" content="Übersicht deiner gespeicherten EV‑Ladestationen, mit Suche, CSV‑Export und Karte." />
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
  <style>
    :root {
      --bg: #0b0f19;
      --panel: #121829;
      --muted: #9aa4b2;
      --text: #e6e9ee;
      --brand: #005AE0; /* Beko's bevorzugter Blauton */
      --border: #1f2a44;
    }
    * { box-sizing: border-box; }
    body { margin: 0; font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji"; background: var(--bg); color: var(--text); }
    header { padding: 28px 20px; border-bottom: 1px solid var(--border); background: linear-gradient(180deg, rgba(0,0,0,.2), transparent); }
    .container { max-width: 1100px; margin: 0 auto; padding: 0 20px; }
    h1 { margin: 0 0 6px; font-weight: 800; letter-spacing: .2px; }
    .sub { color: var(--muted); margin: 0; }

    .controls { display: grid; grid-template-columns: 1fr auto auto; gap: 12px; margin: 18px 0 22px; }
    input[type="search"] { width: 100%; padding: 12px 14px; border-radius: 12px; background: var(--panel); border: 1px solid var(--border); color: var(--text); outline: none; }
    button { padding: 10px 14px; border-radius: 12px; border: 1px solid var(--brand); background: #003b95; color: #fff; cursor: pointer; font-weight: 600; }
    button.secondary { border-color: var(--border); background: var(--panel); color: var(--text); }
    button:disabled { opacity: .6; cursor: not-allowed; }

    #map { height: 360px; border: 1px solid var(--border); border-radius: 16px; margin-bottom: 18px; }

    table { width: 100%; border-collapse: collapse; background: var(--panel); border: 1px solid var(--border); border-radius: 16px; overflow: hidden; }
    thead th { text-align: left; font-size: 14px; color: var(--muted); background: #0f1526; border-bottom: 1px solid var(--border); padding: 12px; }
    tbody td { padding: 12px; border-bottom: 1px solid var(--border); }
    tbody tr:hover { background: rgba(0,0,0,.2); }
    .badge { display: inline-block; padding: 2px 8px; border-radius: 999px; background: rgba(0,90,224,.15); color: #b9d3ff; font-size: 12px; }

    footer { color: var(--muted); padding: 28px 20px; text-align: center; }
    a { color: #b9d3ff; }
  </style>
</head>
<body>
  <header>
    <div class="container">
      <h1>EV‑Ladestationen</h1>
      <p class="sub">Deine gespeicherte Liste als GitHub‑Seite. Suche, Karte und CSV‑Export inklusive.</p>
    </div>
  </header>

  <main class="container">
    <div class="controls">
      <input id="q" type="search" placeholder="Suche nach Name…" aria-label="Suchen" />
      <button id="exportCsv" title="Als CSV herunterladen">CSV exportieren</button>
      <button id="reset" class="secondary" title="Filter zurücksetzen">Zurücksetzen</button>
    </div>

    <div id="map" role="region" aria-label="Karte der Ladestationen"></div>

    <table aria-label="Tabelle der Ladestationen">
      <thead>
        <tr>
          <th>Name</th>
          <th>Lat</th>
          <th>Lon</th>
          <th class="hide-sm">Quelle</th>
        </tr>
      </thead>
      <tbody id="rows"></tbody>
    </table>
  </main>

  <footer>
    <small>Built for GitHub Pages · Dark Mode only · Akzentfarbe <span class="badge">#005AE0</span></small>
  </footer>

  <!-- Leaflet JS -->
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
  <script>
    // === Daten: aus deiner KMZ extrahiert ===
    // Hinweis: Du kannst diese Liste später einfach ersetzen oder via data.csv laden.
    const stations = [
      { name: "Energie 360°-Ladestation", lat: 47.1716838, lon: 8.5185621, source: "Google Maps/KMZ" },
      { name: "Socar St. Katharina Süd", lat: 47.1187306, lon: 8.3748446, source: "Google Maps/KMZ" },
      { name: "GOFAST Ladestation", lat: 47.1845093, lon: 8.1118275, source: "Google Maps/KMZ" },
      { name: "Socar Charge-Ladestation", lat: 47.1977356, lon: 8.0646032, source: "Google Maps/KMZ" },
      { name: "AGROLA-Ladestation", lat: 47.2957006, lon: 7.9323703, source: "Google Maps/KMZ" },
    ];

    // === Suche & Rendering ===
    const q = document.getElementById('q');
    const rows = document.getElementById('rows');
    const resetBtn = document.getElementById('reset');

    function render(list) {
      rows.innerHTML = list.map(s => `
        <tr>
          <td>${s.name}</td>
          <td>${s.lat.toFixed(6)}</td>
          <td>${s.lon.toFixed(6)}</td>
          <td><span class="badge">${s.source || ''}</span></td>
        </tr>`).join('');
    }

    function filter() {
      const term = q.value.trim().toLowerCase();
      const filtered = !term ? stations : stations.filter(s => s.name.toLowerCase().includes(term));
      render(filtered);
      updateMap(filtered);
    }

    q.addEventListener('input', filter);
    resetBtn.addEventListener('click', () => { q.value = ''; filter(); });

    // === CSV Export ===
    document.getElementById('exportCsv').addEventListener('click', () => {
      const header = ['Name','Lat','Lon','Quelle'];
      const lines = stations.map(s => [s.name, s.lat, s.lon, s.source || ''].map(v => `"${String(v).replace(/"/g,'""')}"`).join(','));
      const csv = [header.join(','), ...lines].join('\n');
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url; a.download = 'ladestationen.csv'; a.click();
      URL.revokeObjectURL(url);
    });

    // === Karte ===
    let map, markersLayer;
    function initMap() {
      map = L.map('map');
      L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
        attribution: '&copy; OpenStreetMap &copy; CARTO',
        maxZoom: 20
      }).addTo(map);
      markersLayer = L.layerGroup().addTo(map);
      updateMap(stations);
    }

    function updateMap(list) {
      markersLayer.clearLayers();
      const bounds = [];
      list.forEach(s => {
        const marker = L.marker([s.lat, s.lon]).bindPopup(`<b>${s.name}</b><br/>Lat: ${s.lat.toFixed(6)}<br/>Lon: ${s.lon.toFixed(6)}`);
        marker.addTo(markersLayer);
        bounds.push([s.lat, s.lon]);
      });
      if (bounds.length) {
        map.fitBounds(bounds, { padding: [20, 20] });
      }
    }

    // Init
    render(stations);
    initMap();
  </script>
</body>
</html>
